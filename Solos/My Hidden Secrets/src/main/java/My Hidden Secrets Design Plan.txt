Create Class Crypto:
1. Create Instance variables: password, key, hash
2. Create constructor with only user password as parameter
set this.password to user password
set key equals to generate key method
set hash to password.hashCode()
3. Create private method generateKey with password as parameter
Mod the length of password by 256 and then add 1
Return value
	4. Create encryptFile boolean method with fileName as parameter
Create try catch within try parameter initialize reader and buffered reader
Create variable line for line that is being read
Inside try catch:
- attempt to parseInt first line of file
- return false as number is parseable and is hash code of file assuming it is encrypted
- if throw NumberFormatException first line is not a hash code
- Another try catch within try parameter initialize writer and buffered writer
- write instance variable into new file first
- While loop for will reader does not read null line:
	- for loop while did not reach the end of the line:
		- get int line.charAt(i)
		- get new int of the char by adding int of og char with key and then mod 256
		- write( typecast char with new int of char)
- Catch Bad files and other exceptions: return false along with print that error occurred
- Print encrypted successful if return already did not happen
- return true
- Color print errors with read and success print green
5. Create decryptFile boolean method with fileName parameter
See if fileName already is already decrypted by see if the extension (“.cpoy”) is already on the file name or (“.txt”) is the extension because then they do not need decrypting: if is then print wrong file type and return false
Try catch with try parameter as initialize reader and buffered reader
	- Create variable line for line that is being read
	- if first line from file parseInt(line) equals instance variable hash then
		- Another try catch within try parameter initialize writer and buffered writer
- write instance variable into new file first
- While loop for will reader does not read null line:
			- for loop while did not reach the end of the line:
				- get int line.charAt(i)
				- get new int of the char by subtract int of og char with key and add 256 then mod 256
				- write( typecast char with new int of char)
- Catch Bad files and other exceptions: return false along with print that error occurred
- Print encrypted successful if return already did not happen
- return true
- Color print errors with read and success print green
	6. toString method:
		- return password space key space hash
Decrypter Class:
Create instance variables message and password
Constructor no para
Message equal to empty quotation
Password equal to empty quotation
Call decrypt method
      - private void method: decrypt no para
Try catch with try parameter as initialize reader and buffered reader
Create variable line for line that is being read
Get the hash of the file be reading the first line and storing
While loop of line equal to reader reading each line not equal to null:
If line.hashCode == to hash of file previously stored set password equal to line
      - Create crypto class object 
      - call decryptFile method in crypto object with parameter as “hidden.txt.cyp”
      - Create new reader with reading into “hidden.txt.cpoy”
      - create string variable for line reader
      - While loop for will reader does not read null line
	- add line to instance variable message

 Catch Bad files and other exceptions
        - getMessage method
- return message
        - getPassword method
- return password
Main method class
Create scanner
Create decrypter class
Print welcome user
Print showing test for user
Print decrypter.getMessage and .getPassword
Print ask user for password
Create variable for password and equal to user response
Create crypto class with user password
Create empty quote string variable for userAnswer to questions
While loop: while userAnswer does not equal 3
Print what would you like to do: 1. Encrypt 2. Decrypt. 3. Leave
Store userAnswer
If 1:
Print what file would you like to encrypt
Collect user response and store file name into variable
Call crypto class .encryptFile with userResponse into the parameter
		      - If 2:
			- Print what file would you like to decrypt
Collect user response and store file name into variable
Call crypto class .decryptFile with userResponse into the parameter
	      - Thank user
Unit test of Crypto Class
Instance variable of crypto object
Before each test: create new crypto object with parameter “hello”
Display name of see if file is encrypted return false
Assert expected false and run object .encryptFile(“hidden.txt.cyp”)
	      - Display name of see if decrypt method catch file type is wrong should return false
		- assert expected false and run object .decryptFile(“hidden.txt.cpoy”)
	      - Display name To string return proper instance variable
		- create string variable test equals : password space key space hash
		- assert test variable with called toString in crypto class
Color print statements
Red: Error
Green: Success
Cyan: Software in Main
Different colors for user answers
Text depended on user answer should be same color as question
	

